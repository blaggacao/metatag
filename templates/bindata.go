package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _equal_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4a\x03\x31\x14\x45\xd7\x13\xc8\x3f\x5c\x77\x53\x90\x19\x70\x29\xb8\x10\x71\xa9\x0b\xf1\x07\x9e\xe1\x85\x86\xa6\x49\x9b\x97\x64\x28\x21\xff\x2e\x9a\x2e\xda\xed\xe5\x9e\xc3\x59\x57\xbc\x9f\x0b\x79\x50\x90\x8d\x93\x60\xdb\x73\xde\x73\x42\x85\x13\xf0\xb9\xb8\x4a\x9e\x43\x46\x8e\x68\x6d\xf9\x32\xf5\x93\x8e\xdc\xfb\xa2\xd5\xba\xe2\xd5\x6f\x74\x11\x24\xce\x25\x05\x81\x25\x2f\x0c\x67\x07\x1c\x62\x06\x5d\xa1\xef\xcb\x69\x40\xb6\x04\x83\xf9\xd6\x74\xf7\xd8\x8d\x9a\xb9\xc2\x85\xcc\xc9\x92\xe1\xd6\x77\xf8\x89\xd1\xa3\x69\x35\xdd\x82\x4f\x8f\x88\x07\x3c\xbf\xa0\x2e\xf3\x9d\x43\xab\xc9\x59\x3c\xc4\xc3\x3f\x32\x8d\xba\x11\xa7\xd5\xd4\x87\xe6\xc3\x89\x59\xde\x8e\x27\xe9\x7f\xc3\xf5\x93\x53\x61\xad\xfa\x6f\x00\x00\x00\xff\xff\x47\x9e\x9c\xf8\x15\x01\x00\x00")

func equal_tmpl() ([]byte, error) {
	return bindata_read(
		_equal_tmpl,
		"equal.tmpl",
	)
}

var _filter_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x51\x4d\x8f\xd3\x30\x14\x3c\xd7\x92\xff\xc3\x1c\x13\x29\xa4\xec\x75\xa1\x48\x5c\xb8\xd1\xc3\xb2\xe2\x82\x38\xb8\xe9\x73\x6a\xd6\x7e\x8e\x1c\x67\x45\x15\xf9\xbf\x23\xdb\xa5\xbb\xe2\x63\x25\x0e\x1c\x5a\xd9\x99\x79\x33\xf3\xc6\xdb\x2d\xd6\xb5\xdf\x2b\x47\x29\x21\x50\x5c\x02\xcf\x50\x18\xfc\x74\x86\xd7\x19\xfb\x60\x8f\x15\xee\xe0\x9d\x89\xd1\xf0\x08\xb2\xe4\x88\xe3\x8c\x78\x52\x11\x2a\x10\x02\x7d\xa3\x21\xd2\x11\x87\x33\xe2\x89\x30\x9a\x47\x62\xe8\x85\x87\x68\x3c\xf7\x52\xe4\x23\x9a\x75\xed\xef\x86\xc7\x8b\x5d\xbd\xdc\x9f\x27\x4a\xa9\x7d\x8a\xd1\xe8\x3a\x98\xc9\xef\xc3\xf8\x13\x3f\x78\x6f\x0b\xeb\x8e\xe2\x67\x65\xe7\x2c\x20\xc5\xa6\x66\xc6\x73\xe1\xfe\x2a\xb5\x6f\x34\x77\x78\x75\xd3\x4a\x91\xa4\x90\xe2\xf9\xb6\xfb\xff\xba\xee\x76\x8b\xfb\x13\x81\xa1\xc2\xb8\xe4\x61\x1c\x29\x52\x70\x86\x69\x2e\x13\x4e\x7d\x37\x6e\x71\xe0\xc5\x1d\x28\x64\xf3\x27\x17\x7f\x89\x86\x86\xf1\x16\x37\xb7\x50\xd6\x5e\xe1\xf6\x9f\xca\xdc\xbf\xd0\x66\x07\x86\xe1\xf8\x87\x52\x07\x35\xe1\x76\x07\x96\x62\x63\x34\x4a\x88\xf2\xbd\x00\x3b\x58\xe2\xe6\xd7\xc2\xaf\xbd\xb5\x52\x6c\x52\x79\x98\x79\xb1\x31\xcb\x38\xf5\x40\x4d\xa5\x54\xfb\x0e\xaf\x3b\x0c\x6a\xca\x54\xed\x03\x4c\x66\x05\xc5\x23\xfd\xf6\x8e\x57\xd9\xea\x6f\x34\xf4\x0b\xde\x5f\xcc\xd7\xb6\x12\x33\xf3\x92\x60\x07\x35\x4d\xc4\xc7\xa6\xde\xbb\xbf\x7b\xe4\xf1\x37\x65\xbb\x4a\x6d\xf1\x6e\x97\x73\x5e\x24\x37\x87\x40\xea\xa1\x1c\xf3\x82\xe5\x2f\xff\xd6\xb5\xff\x68\xe6\x21\x77\xf8\x29\xba\x98\x92\x14\xe9\x47\x00\x00\x00\xff\xff\x62\x06\xbf\x64\x58\x03\x00\x00")

func filter_tmpl() ([]byte, error) {
	return bindata_read(
		_filter_tmpl,
		"filter.tmpl",
	)
}

var _getter_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x28\x4a\x2d\x29\x2d\xca\x2b\x56\x28\xc9\x48\x55\x28\x4b\xcc\x29\x4d\x55\xc8\x4f\x03\x49\xbb\xe5\xa4\x40\x54\xe8\xf1\x72\xa5\x95\xe6\x25\x2b\x68\x54\x57\xeb\x05\x25\x97\x41\xb5\x41\x38\x21\x95\x05\xa9\xb5\xb5\x9a\x08\xe3\x34\xc0\xec\xa0\xd4\x92\xb0\xc4\x9c\x62\x90\x32\x5e\x2e\x4e\x88\x0d\x0a\xc8\xda\xf5\x90\x2d\xe0\xe5\xaa\x05\x04\x00\x00\xff\xff\xb6\x49\x5a\xdd\x92\x00\x00\x00")

func getter_tmpl() ([]byte, error) {
	return bindata_read(
		_getter_tmpl,
		"getter.tmpl",
	)
}

var _less_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\x6a\xc3\x30\x14\x85\xe1\xb9\x02\xbd\xc3\x19\x6d\x28\xd2\x0b\x74\xee\x54\x3a\xb4\xdd\x4a\x87\xda\xbe\xae\x64\x64\xc9\x5c\x5d\xd7\x09\x42\xef\x1e\x88\x03\x09\x04\x32\xfe\xf0\x1d\x38\xd6\xe2\x8d\x72\x06\xd3\x92\x58\x32\x36\x47\xe2\x88\x21\x8e\x40\x81\x66\x8a\x82\xcd\x8b\xd3\xca\x5a\xf8\x38\xd0\x01\x1e\xd9\xa5\x35\x0c\xc8\x89\x05\x1d\x8d\x89\xe9\xce\x5f\xec\x64\xb4\x1a\xd7\xd8\xa3\x29\xc5\x7c\xf4\xff\xef\xbf\x33\xd5\x8a\x3d\xbe\x8e\x0b\xd5\xda\x9e\x0f\x34\xfe\x19\x13\x7c\x94\x16\x5d\x4a\x01\x45\xab\x27\x26\x59\x39\xe2\x76\x69\x4a\x31\xaf\x61\xd8\xe3\xdb\xff\x98\x4f\x61\x1f\xff\x9a\x16\x2f\x0f\xdc\x74\x75\x5a\xd5\x53\x00\x00\x00\xff\xff\xa1\x1a\xa4\xa0\xf3\x00\x00\x00")

func less_tmpl() ([]byte, error) {
	return bindata_read(
		_less_tmpl,
		"less.tmpl",
	)
}

var _mapper_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x6a\xc4\x30\x0c\x86\xe7\x0b\xe4\x1d\xfe\x31\x81\xe2\xdb\x0b\x37\x74\xe9\xd8\xe1\x28\x5d\x8e\x1b\x8c\x2b\x3b\xa6\x8e\x52\x6c\xe7\x8e\x62\xfc\xee\x45\x49\xa0\xe9\xd0\x8e\x92\x7e\xe9\xfb\xd0\xf1\x88\x52\xd4\x8b\x1e\xa9\x56\x44\xca\x73\xe4\x04\x0d\xa6\x3b\x52\xf0\x86\x70\xf7\x79\x40\x1e\x08\x91\xd2\x1c\x72\xc2\x64\x61\x74\x08\x9e\xdd\xd2\x76\xfe\x46\x0c\x3b\xb3\xc9\x7e\x62\xd8\x29\x82\xb4\x19\x40\x81\x46\xe2\x2c\xf1\x52\xd4\x73\x78\x5f\x19\xaa\x6d\x24\x8b\xae\x14\x75\x36\xb7\x0d\xbc\x16\xaf\x5f\x9f\x54\x6b\xff\x23\xd4\x59\x96\xe2\x29\xba\xdd\xe8\x4c\xf9\x4d\x87\x24\x5b\x6d\x73\x58\xad\xf0\x78\xc2\xa8\x3f\xa8\xdb\xcf\x1f\x10\x88\x7f\x71\xd4\xde\xa4\xef\xdb\xe6\x20\xba\x5e\xb6\xa3\x66\x47\xf8\x33\xbc\xb0\x36\xd8\xc5\x5f\x71\x82\xfd\xe7\xf4\xc5\x5f\xe5\x78\x5d\xfc\xe4\xa5\xdb\xf3\xda\xa6\x7e\x07\x00\x00\xff\xff\xab\xc2\xc6\xec\x70\x01\x00\x00")

func mapper_tmpl() ([]byte, error) {
	return bindata_read(
		_mapper_tmpl,
		"mapper.tmpl",
	)
}

var _new_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\xb1\x0a\xc2\x40\x0c\x86\xe7\x16\xfa\x0e\xa1\x93\x2e\xd7\x67\x70\x71\xd3\x41\xc4\x3d\x9c\xb1\x0d\x9c\x87\x5c\xd2\x16\x09\x79\x77\xe9\x81\x88\xeb\xf7\xf1\x7f\xff\x30\x80\x59\x38\xe3\x93\xdc\x21\x16\x42\x25\x01\x84\x4c\xeb\xc6\x2f\x71\xb9\xbe\x5f\x9b\x5a\x59\x27\xd0\x89\x60\xe4\x85\x32\x70\x66\x65\x4c\xb0\x60\x9a\x49\x42\xd7\x3e\xe6\x1c\x7f\xa5\x9d\x59\x38\xb1\xc4\x70\x28\xa3\xb8\xef\x6b\x8b\xf4\x86\x49\xdc\xc1\xba\xb6\x29\xa4\x73\xc9\x7f\x1f\x66\xbd\xf5\xee\x5d\xdb\x34\xdf\xf9\x91\x29\xdd\xa5\x32\xb3\xde\xab\xf5\x4f\x00\x00\x00\xff\xff\xbd\x7c\x04\x5b\xb3\x00\x00\x00")

func new_tmpl() ([]byte, error) {
	return bindata_read(
		_new_tmpl,
		"new.tmpl",
	)
}

var _setter_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\xa8\xae\xd6\xf3\x4b\xcc\x4d\xad\xad\x55\x28\x4e\x2d\x29\x56\x28\xc9\x48\x55\x48\xcf\x2c\x4b\xcd\x53\x28\x4b\xcc\x29\x4d\x55\x48\x2c\x06\xa9\x70\xcb\x49\x81\x28\xd2\xe3\xe5\x4a\x2b\xcd\x4b\x56\xd0\xa8\xae\xd6\x0b\x4a\x2e\x83\xea\x84\x70\x42\x2a\x0b\x52\x6b\x6b\x35\x11\x26\x82\x14\x39\x16\xa5\x23\x14\x39\x16\xa5\xc3\x15\xf1\x72\x71\x22\x9b\xa1\x87\x6c\x8b\x82\xad\x02\xb2\x56\x5e\xae\x5a\x40\x00\x00\x00\xff\xff\x26\x49\x6f\x22\xa9\x00\x00\x00")

func setter_tmpl() ([]byte, error) {
	return bindata_read(
		_setter_tmpl,
		"setter.tmpl",
	)
}

var _sort_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x6a\xac\x40\x10\x45\xd7\xaf\xa1\xff\xe1\x2e\x6d\x18\xf4\x0b\xde\x36\xab\x90\x45\x92\x5d\x70\x61\xda\x1a\x2c\xd1\x6a\x69\xcb\x31\x41\xfa\xdf\x83\x0a\x89\xb3\x98\x61\x96\x55\x87\x5b\x9c\xdb\x5d\x14\x78\x26\x01\x8f\xd0\x86\x20\x53\xff\x49\x11\xe1\x0c\xea\xa8\x27\xd1\x11\x2c\x1b\xf1\xa1\xeb\xc8\x2b\x07\xc9\xad\x39\x4f\xe2\x91\x2d\x4b\xfe\xea\x2f\x2f\x55\x4f\x29\x61\x1f\xde\xbf\x07\x4a\xc9\xad\x27\x33\x07\x16\xc5\x62\xcd\xbf\x48\x3a\x45\x41\x47\x72\x95\xc9\x97\x25\x7f\xea\xea\x7d\x70\xd6\x24\x6b\xac\x29\x0a\xbc\xcd\xd5\x80\x71\xae\x86\xdd\xe9\xd7\x64\x66\x6d\xc0\x52\xd3\x17\x8d\x60\x54\x52\xa3\x7d\x44\x66\xbd\x97\xf1\x09\xed\x2a\xe4\x36\xa3\x9b\x1a\x1f\x5c\x9e\x70\x9b\xb6\x25\xfe\xdf\xc5\xf7\xc2\x5c\x1e\x3a\x86\xa8\xeb\xa3\x57\xf0\x41\x2e\x24\x4c\xe2\x09\x3d\x69\x13\xea\x87\x3a\x85\xa8\x99\xbb\x5a\x6e\xc5\xc6\x10\x35\xdf\xe0\x31\xec\xfe\x3e\xe1\xb8\xb6\x26\xfd\x04\x00\x00\xff\xff\x4b\xe9\xb7\x0f\xff\x01\x00\x00")

func sort_tmpl() ([]byte, error) {
	return bindata_read(
		_sort_tmpl,
		"sort.tmpl",
	)
}

var _stringer_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\xca\xc2\x30\x10\x85\xd7\x7f\xa1\x77\x18\xb2\x6a\xe1\x27\x3d\x83\x1b\xc1\x85\x2e\xd4\x0b\x84\x30\xd1\x80\x99\x96\xc9\xb4\x20\x61\xee\x2e\x38\xba\x70\xfb\x78\xef\x7b\xdf\x34\xc1\x45\x38\xd3\x0d\x18\x65\x65\xaa\x20\x77\x04\x47\x41\xf2\x86\x0e\xd2\xcc\x25\x08\xcc\x09\x5a\xf3\xe7\xb8\x5d\x9f\x0b\xaa\x7a\x38\x94\xe5\x81\x05\x49\xac\x9f\x8a\x78\xc3\x20\x43\x26\x41\x4e\x21\xa2\xef\xbb\xb4\x52\x84\xc1\xb6\xa7\x50\x50\xf5\x07\x34\x7e\xce\x87\x11\xaa\x59\xb4\xbe\xfb\x33\x13\x83\x2e\x9c\x49\xd2\xe0\x5a\xf3\xc7\x5c\xa3\xdf\xbf\x85\x54\xdd\x3f\x7c\xa3\x9d\xea\xd8\x77\xfa\x0a\x00\x00\xff\xff\xb1\xb3\x89\x7a\xca\x00\x00\x00")

func stringer_tmpl() ([]byte, error) {
	return bindata_read(
		_stringer_tmpl,
		"stringer.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"equal.tmpl": equal_tmpl,
	"filter.tmpl": filter_tmpl,
	"getter.tmpl": getter_tmpl,
	"less.tmpl": less_tmpl,
	"mapper.tmpl": mapper_tmpl,
	"new.tmpl": new_tmpl,
	"setter.tmpl": setter_tmpl,
	"sort.tmpl": sort_tmpl,
	"stringer.tmpl": stringer_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"equal.tmpl": &_bintree_t{equal_tmpl, map[string]*_bintree_t{
	}},
	"filter.tmpl": &_bintree_t{filter_tmpl, map[string]*_bintree_t{
	}},
	"getter.tmpl": &_bintree_t{getter_tmpl, map[string]*_bintree_t{
	}},
	"less.tmpl": &_bintree_t{less_tmpl, map[string]*_bintree_t{
	}},
	"mapper.tmpl": &_bintree_t{mapper_tmpl, map[string]*_bintree_t{
	}},
	"new.tmpl": &_bintree_t{new_tmpl, map[string]*_bintree_t{
	}},
	"setter.tmpl": &_bintree_t{setter_tmpl, map[string]*_bintree_t{
	}},
	"sort.tmpl": &_bintree_t{sort_tmpl, map[string]*_bintree_t{
	}},
	"stringer.tmpl": &_bintree_t{stringer_tmpl, map[string]*_bintree_t{
	}},
}}
