// GENERATED BY metatag, DO NOT EDIT
// (or edit away - I'm a comment, not a cop)
package person

import (
	"fmt"
)

// String returns the "native" format of Person. Implements the fmt.Stringer interface.
func (p Person) String() string {
	return fmt.Sprintf("%v", p.Name)
}

// Filter returns a copy of Persons, omitting elements that are rejected by the given function.
// The n argument determines the maximum number of elements to return (n < 1: all elements).
func (p Persons) Filter(fn func(Person) bool, n int) []Person {
	cap := n
	if n < 1 {
		cap = len(p.Persons)
	}
	result := make([]Person, 0, cap)
	for i := range p.Persons {
		if fn(p.Persons[i]) {
			if result = append(result, p.Persons[i]); len(result) >= cap {
				return result
			}
		}
	}
	return result
}

// MapToInt returns a new slice with the results of calling the given function for each element of Persons.
func (p Persons) MapToInt(fn func(Person) int) []int {
	result := make([]int, len(p.Persons))
	for i := range p.Persons {
		result[i] = fn(p.Persons[i])
	}
	return result
}
