// GENERATED BY metatag, DO NOT EDIT
// (or edit away - I'm a comment, not a cop)

package person

import (
	"fmt"
	"sort"
)

type personsLesser struct {
	Persons
	less func(vi, vj Person) bool
}

// String returns the "native" format of Person. Implements the fmt.Stringer interface.
func (p Person) String() string {
	return fmt.Sprintf("%v", p.Name)
}

// NewPersons creates a new Persons with the given initial values.
func NewPersons(result []Person) Persons {
	return Persons{
		result: result,
	}
}

// Filter returns a copy of result, omitting elements that are rejected by the given function.
func (p Persons) Filter(fn func(Person) bool) Persons {
	return p.FilterN(fn, -1)
}

// FilterN returns a copy of result, omitting elements that are rejected by the given function.
// The n argument determines the maximum number of elements to return (n < 1: all elements).
func (p Persons) FilterN(fn func(Person) bool, n int) Persons {
	cap := n
	if n < 1 {
		cap = len(p.result)
	}
	result := make([]Person, 0, cap)
	for i := range p.result {
		if fn(p.result[i]) {
			if result = append(result, p.result[i]); len(result) >= cap {
				break
			}
		}
	}
	p.result = result
	return p
}

// MapToInt returns a new slice with the results of calling the given function for each element of result.
func (p Persons) MapToInt(fn func(Person) int) []int {
	result := make([]int, len(p.result))
	for i := range p.result {
		result[i] = fn(p.result[i])
	}
	return result
}

// Len is the number of elements in the collection.
func (p Persons) Len() int {
	return len(p.result)
}

// Swap swaps the elements with indexes i and j.
func (p Persons) Swap(i, j int) {
	p.result[i], p.result[j] = p.result[j], p.result[i]
}

// Less reports whether the element with
// index i should sort before the element with index j.
func (p personsLesser) Less(i, j int) bool {
	return p.less(p.result[i], p.result[j])
}

// Sort sorts the collection using the given less function.
func (p Persons) Sort(less func(vi, vj Person) bool) Persons {
    sort.Sort(personsLesser{
        Persons: p,
        less: less,
    })
    return p
}

// Result returns the value of result.
func (p Persons) Result() []Person {
	return p.result
}
